import streamlit as st
import os
import json
from datetime import datetime
from pathlib import Path
import openai

st.set_page_config(page_title="Diyet Planƒ±", layout="centered")

st.title("üìÖ Diyet Planƒ±")

# Diyet planlarƒ± i√ßin klas√∂r√º kontrol et
Path("db").mkdir(parents=True, exist_ok=True)
Path("temp").mkdir(parents=True, exist_ok=True)  # ge√ßici klas√∂r√º olu≈ütur

# db klas√∂r√ºn√º diet_plan dosyalarƒ± i√ßin kontrol et
path = Path("db")
if not path.exists():
    os.makedirs(path)
else:
    # db klas√∂r√ºnde diet_plan_ ile ba≈ülayan dosyalarƒ± kontrol et
    existing_files = [f for f in os.listdir(path) if f.startswith("diet_plan_") and f.endswith(".json")]

bugun = datetime.now().strftime("%d-%m-%Y")
dosya_adi = f"diet_plan_{bugun}.json"
counter = 0
if dosya_adi in existing_files:
    while dosya_adi in existing_files:
        counter += 1
        dosya_adi = f"diet_plan_{bugun}_{counter}.json"
dosya_yolu = Path("db") / dosya_adi

if len(existing_files) < 1 or st.toggle("yeni plan olu≈ütur", key="plan_olustur", value=False):
    st.write("dosya yolu:", dosya_yolu)
    #st.warning("Hen√ºz bir diyet planƒ± olu≈üturulmamƒ±≈ü.")        
    if st.button("üõ†Ô∏è Hemen Olu≈ütur"):
        st.session_state["plan_olustur"] = True

else:
    # get all files in db/ folder that start with "diet_plan_"
    existing_files = [f for f in os.listdir("db") if f.startswith("diet_plan_") and f.endswith(".json")]
    if existing_files:
        selected_plan = st.selectbox(
            "üìÇ Mevcut Diyet Planlarƒ±",
            options=existing_files,
            index=0,
            key="existing_diet_plans",
            help="Mevcut diyet planlarƒ±nƒ±zƒ± buradan se√ßebilirsiniz."
        )
        st.session_state["selected_plan"] = selected_plan

# Plan olu≈üturulursa gerekli girdileri al
if "plan_olustur" in st.session_state and st.session_state.plan_olustur:
    placeholder_for_title = st.empty()
    openai_key = st.session_state.get("OPENAI_API_KEY") or st.text_input("OpenAI Key'inizi girin", type="password")
    if len(openai_key) < 5:
        placeholder_for_title.subheader("üîë OpenAI API Key")
    openai.api_key = openai_key

    st.subheader("üîé Opsiyonel Belgeler (Kan Tahlili, Rapor vs)")
    belgeler = st.file_uploader("Belgeleri y√ºkleyin", type=["pdf", "txt", "csv", "jpg", "jpeg", "png", "webp", "docx"], accept_multiple_files=True)

    st.subheader("üìù Ek Bilgiler")
    ek_bilgi = st.text_area("Diyet i√ßin √∂zellikle dikkat edilmesini istediƒüiniz hususlar", help="Alerjiler, sevmediƒüiniz gƒ±dalar, b√ºt√ße limitleri, her ≈üeyden bahsedebilirsiniz.", placeholder="Alerjiler, sevmediƒüiniz gƒ±dalar, b√ºt√ße limitleri, her ≈üeyden bahsedebilirsiniz.")

    if st.button("üì® OpenAI'ye G√∂nder ve Planƒ± Olu≈ütur") and openai_key:
        uploaded_file_ids = []
        for file in belgeler or []:
            temp_path = Path("temp") / file.name
            with open(temp_path, "wb") as temp_f:
                temp_f.write(file.read())
            with open(temp_path, "rb") as f:
                uploaded = openai.files.create(file=f, purpose="user_data")
                uploaded_file_ids.append(uploaded.id)
            os.remove(temp_path)

        content_blocks = []
        for fid in uploaded_file_ids:
            content_blocks.append({"type": "file", "file": {"file_id": fid}})

        if ek_bilgi:
            content_blocks.append({"type": "text", "text": ek_bilgi})

        system_prompt = "Sen bir ki≈üisel saƒülƒ±k ve beslenme asistanƒ±sƒ±n. Kullanƒ±cƒ± sana kan tahlili belgeleri gibi √ße≈üitli ve a√ßƒ±klayƒ±cƒ± bilgiler i√ßeren belgeler y√ºkleyebilir buna ek olarak ek promptlar da iletebilir alerjileri veya sevmediƒüi gƒ±dalar gibi. G√∂revin bu bilgileri analiz edip saƒülƒ±k a√ßƒ±sƒ±ndan √∂nemli verileri √∂zetlemek ve sonra buna uygun ≈üekilde ki≈üiselle≈ütirilmi≈ü bir diyet sistemi olu≈üturmaktƒ±r."

        response = openai.chat.completions.create(
            model="gpt-4o",
            response_format={ "type": "json_object" },
            messages=[
                {
                    "role": "system",
                    "content": (
                        system_prompt
                        + "\n\nL√ºtfen √ßƒ±ktƒ±yƒ± sadece a≈üaƒüƒ±daki JSON formatƒ±na birebir uygun ≈üekilde √ºret (eƒüer hi√ß belge y√ºklenmediyse document_reports'u bo≈ü array olarak bƒ±rak):\n\n"
                        + json.dumps({
                            "document_reports": [
                                {
                                    "document_title": "ai generated kƒ±sa title",
                                    "document_summary": "diyet odaklƒ± kƒ±sa √∂zet"
                                }
                            ],
                            "generated_system_prompt": "kullanƒ±cƒ±nƒ±n belirlediƒüi g√ºn/hafta sayƒ±sƒ±na ve kullanƒ±cƒ±nƒ±n saƒülƒ±k durumuna uygun ≈üekilde diyet programƒ± olu≈üturacak bir ai requestin sistem promptu olacak ≈üekilde olduk√ßa detaylƒ± olu≈ütur.",
                            "system_prompt_summary": "yukarƒ±da yarattƒ±ƒüƒ±n sistem promptu kullanƒ±cƒ±ya √∂zetlemeye yarayan bir a√ßƒ±klamadƒ±r.",
                        }, indent=2, ensure_ascii=False)
                    )
                },
                {
                    "role": "user",
                    "content": content_blocks
                }
            ]
        )

        response_raw = json.loads(response.choices[0].message.content)
        response_text = json.dump(response_raw, open("response.json", "w"), indent=2)
        with st.expander("Response"):
            st.write(response_raw)
        generated_prompt = response_raw["generated_system_prompt"]
        system_prompt_summary = response_raw["system_prompt_summary"]
        
        output = {
            "document_reports": [],
            "system_prompt_summary": system_prompt_summary,
            "generated_system_prompt": generated_prompt
        }

        with open(dosya_yolu, "w", encoding="utf-8") as f:
            json.dump(output, f, ensure_ascii=False, indent=2)

        st.success("‚úÖ Diyet planƒ± olu≈üturuldu")
        st.rerun()

# JSON dosyasƒ± varsa, detaylarƒ± g√∂ster
if dosya_yolu.exists() or "selected_plan" in st.session_state:
    if "selected_plan" in st.session_state:
        dosya_yolu = Path("db") / st.session_state.selected_plan
    with open(dosya_yolu, encoding="utf-8") as f:
        veri = json.load(f)

    with st.expander("üìå Sana ≈üunlara dikkat ederek bir diyet programƒ± hazƒ±rlayabilirim"):
        st.write(veri.get("system_prompt_summary", "-"))

    st.markdown("---")
    st.subheader("üìÖ Diyet Planƒ± Se√ßimi")
    col1, col2, col3, col4, col5 = st.columns([1, 1, 1.5, 2, 1], vertical_alignment="center")
    placeholder_diyet = st.empty()
    with col1: st.write("Bana")
    with col2: miktar = st.number_input(" ", label_visibility="collapsed", min_value=1, max_value=30, value=7)
    with col3: periyot = st.selectbox(" ",  label_visibility="collapsed", options=["g√ºnl√ºk", "haftalƒ±k", "aylƒ±k"])
    with col4: st.write("diyet programƒ±")
    with col5:
        if st.button("Hazƒ±rla!"):
            system_prompt = veri.get("generated_system_prompt", "")

            # Diyet planƒ± olu≈üturmak i√ßin OpenAI'ye isteƒüi g√∂nder
            second_response = openai.chat.completions.create(
                model="gpt-4o",
                response_format={"type": "json_object"},
                messages=[
                    {"role": "system", "content": system_prompt},
                    {
                        "role": "user",
                        "content": (
                            f"L√ºtfen {miktar} {periyot} s√ºrelik bir diyet programƒ± hazƒ±rla ve json olarak √ßƒ±ktƒ± ver. "
                            "Market olarak sadece Bƒ∞M, A101 ve ≈ûOK kullanƒ±labilir. "
                            "Yemek tariflerini ve market √ºr√ºnlerini detaylƒ± yaz. "
                            "√áƒ±ktƒ± formatƒ± ≈üu olsun: "
                            + json.dumps({
                                "haftalar": [
                                    {"hafta": 1,
                                    "g√ºnler": [
                                        {"g√ºn": "Pazartesi",
                                        "√∂ƒü√ºnler": [
                                            {"√∂ƒü√ºn": "√ñƒüle",
                                            "yemekler": [
                                                {
                                                    "isim": "<yemek adƒ±>",
                                                    "sebep": "<diyet i√ßin neden √∂nemli.>",
                                                    "√∂nem": "3/5",
                                                    "alinacak_malzemeler": [
                                                        {
                                                            "√ºr√ºn": "<√ºr√ºn adƒ±>",
                                                            "marka": "<√ºr√ºn markasƒ±>",
                                                            "miktar": "<miktar> g",
                                                            "market": "<Bƒ∞M/A101/≈ûOK>"
                                                        }
                                                    ],
                                                    "tarif": [
                                                        "<tarif adƒ±mƒ± 1>",
                                                        "<tarif adƒ±mƒ± 2>",
                                                    ]
                                                }
                                            ]}
                                        ]}
                                    ]}
                                ]
                            })
                        )
                    }
                ]
            )
            placeholder_diyet.markdown("### ‚úÖ Olu≈üan Diyet Planƒ±:")
            placeholder_diyet.write(second_response)
            response2_raw = json.loads(second_response.choices[0].message.content)
            placeholder_diyet.write(response2_raw)
            json.dump(response2_raw, open("second_response.json", "w"), indent=2)
